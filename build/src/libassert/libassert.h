/* libassert.h generated by valac 0.50.2, the Vala compiler, do not modify */

#ifndef __SRC_LIBASSERT_LIBASSERT_H__
#define __SRC_LIBASSERT_LIBASSERT_H__

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

G_BEGIN_DECLS

#define ASSERT_TYPE_TEST_SUITE_INSTANCE (assert_test_suite_instance_get_type ())
#define ASSERT_TEST_SUITE_INSTANCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ASSERT_TYPE_TEST_SUITE_INSTANCE, AssertTestSuiteInstance))
#define ASSERT_TEST_SUITE_INSTANCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ASSERT_TYPE_TEST_SUITE_INSTANCE, AssertTestSuiteInstanceClass))
#define ASSERT_IS_TEST_SUITE_INSTANCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ASSERT_TYPE_TEST_SUITE_INSTANCE))
#define ASSERT_IS_TEST_SUITE_INSTANCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ASSERT_TYPE_TEST_SUITE_INSTANCE))
#define ASSERT_TEST_SUITE_INSTANCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ASSERT_TYPE_TEST_SUITE_INSTANCE, AssertTestSuiteInstanceClass))

typedef struct _AssertTestSuiteInstance AssertTestSuiteInstance;
typedef struct _AssertTestSuiteInstanceClass AssertTestSuiteInstanceClass;
typedef struct _AssertTestSuiteInstancePrivate AssertTestSuiteInstancePrivate;
typedef void (*AssertTestCase) (gpointer user_data, GError** error);
typedef void (*AssertTestSuite) (AssertTestSuiteInstance* instance, gpointer user_data);

#define ASSERT_TYPE_NAMED_TEST_CASE (assert_named_test_case_get_type ())
typedef struct _AssertNamedTestCase AssertNamedTestCase;

#define ASSERT_TYPE_ASSERTION_RESULT (assert_assertion_result_get_type ())
#define ASSERT_ASSERTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ASSERT_TYPE_ASSERTION_RESULT, AssertAssertionResult))
#define ASSERT_ASSERTION_RESULT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ASSERT_TYPE_ASSERTION_RESULT, AssertAssertionResultClass))
#define ASSERT_IS_ASSERTION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ASSERT_TYPE_ASSERTION_RESULT))
#define ASSERT_IS_ASSERTION_RESULT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ASSERT_TYPE_ASSERTION_RESULT))
#define ASSERT_ASSERTION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ASSERT_TYPE_ASSERTION_RESULT, AssertAssertionResultClass))

typedef struct _AssertAssertionResult AssertAssertionResult;
typedef struct _AssertAssertionResultClass AssertAssertionResultClass;
typedef struct _AssertAssertionResultPrivate AssertAssertionResultPrivate;

struct _AssertTestSuiteInstance {
	GObject parent_instance;
	AssertTestSuiteInstancePrivate * priv;
};

struct _AssertTestSuiteInstanceClass {
	GObjectClass parent_class;
};

struct _AssertNamedTestCase {
	gchar* name;
	AssertTestCase tcase;
	gpointer tcase_target;
	GDestroyNotify tcase_target_destroy_notify;
};

struct _AssertAssertionResult {
	GTypeInstance parent_instance;
	volatile int ref_count;
	AssertAssertionResultPrivate * priv;
	gboolean is_error;
	gchar* message;
};

struct _AssertAssertionResultClass {
	GTypeClass parent_class;
	void (*finalize) (AssertAssertionResult *self);
};

GType assert_test_suite_instance_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AssertTestSuiteInstance, g_object_unref)
void assert_test_suite_instance_it (AssertTestSuiteInstance* self,
                                    const gchar* name,
                                    AssertTestCase tcase,
                                    gpointer tcase_target);
void assert_test_suite_instance_run (AssertTestSuiteInstance* self);
void assert_test_suite_instance_assert (AssertTestSuiteInstance* self,
                                        gboolean condition,
                                        const gchar* message,
                                        GError** error);
AssertTestSuiteInstance* assert_test_suite_instance_new (void);
AssertTestSuiteInstance* assert_test_suite_instance_construct (GType object_type);
GType assert_named_test_case_get_type (void) G_GNUC_CONST;
AssertNamedTestCase* assert_named_test_case_dup (const AssertNamedTestCase* self);
void assert_named_test_case_free (AssertNamedTestCase* self);
void assert_named_test_case_copy (const AssertNamedTestCase* self,
                                  AssertNamedTestCase* dest);
void assert_named_test_case_destroy (AssertNamedTestCase* self);
AssertTestSuiteInstance* assert_suite (const gchar* name,
                                       AssertTestSuite tsuite,
                                       gpointer tsuite_target);
gpointer assert_assertion_result_ref (gpointer instance);
void assert_assertion_result_unref (gpointer instance);
GParamSpec* assert_param_spec_assertion_result (const gchar* name,
                                                const gchar* nick,
                                                const gchar* blurb,
                                                GType object_type,
                                                GParamFlags flags);
void assert_value_set_assertion_result (GValue* value,
                                        gpointer v_object);
void assert_value_take_assertion_result (GValue* value,
                                         gpointer v_object);
gpointer assert_value_get_assertion_result (const GValue* value);
GType assert_assertion_result_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AssertAssertionResult, assert_assertion_result_unref)
AssertAssertionResult* assert_assertion_result_new_error (const gchar* message);
AssertAssertionResult* assert_assertion_result_construct_error (GType object_type,
                                                                const gchar* message);
AssertAssertionResult* assert_assertion_result_new_success (void);
AssertAssertionResult* assert_assertion_result_construct_success (GType object_type);
AssertAssertionResult* assert_assertion_result_new (void);
AssertAssertionResult* assert_assertion_result_construct (GType object_type);

G_END_DECLS

#endif
